#include "llm_topics.hpp"
#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonValue>
#include <QRegularExpression>
#include <algorithm>
#include <cmath>
#include <unistd.h>
#include <algorithm>
#include <vector>  // –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø–æ–¥–∫–ª—é—á–∏—Ç llama.h –∑–¥–µ—Å—å

static const char* kAllTopicsCSV =
"Politics,Business,Tech,Science,Health,Sports,Entertainment,Culture,Education,Travel,Cars,Finance,Crime,War";

LlmTopics::~LlmTopics(){ destroy(); }

int LlmTopics::detectThreads() {
#ifdef _SC_NPROCESSORS_ONLN
    long n = ::sysconf(_SC_NPROCESSORS_ONLN);
    return n>0 ? int(n) : 4;
#else
    return 4;
#endif
}

std::string LlmTopics::toStd(const QString& s) {
    const QByteArray b = s.toUtf8();
    return std::string(b.constData(), size_t(b.size()));
}

bool LlmTopics::init(){
    if (model_) return true;
    if (opt_.n_threads<=0) opt_.n_threads = detectThreads();

    llama_backend_init();

    llama_model_params mp = llama_model_default_params();
    model_ = llama_model_load_from_file(toStd(opt_.modelPath).c_str(), mp);
    if (!model_) return false;

    llama_context_params cp = llama_context_default_params();
    cp.n_ctx     = opt_.n_ctx;
    cp.n_threads = opt_.n_threads;
    ctx_ = llama_init_from_model(model_, cp);
    if (!ctx_) return false;

    vocab_ = llama_model_get_vocab(model_);
    return true;
}

void LlmTopics::destroy(){
    if (ctx_)   { llama_free(ctx_); ctx_ = nullptr; }
    if (model_) { llama_model_free(model_); model_ = nullptr; } // <-- –Ω–µ llama_free_model
    vocab_ = nullptr;
}

QString LlmTopics::generate(const QString& userPrompt){
    // 1) Qwen chat template
    QString chat =
        "<|im_start|>system\n"
        "You are a strict JSON generator. Reply ONLY with one JSON object.\n"
        "<|im_end|>\n"
        "<|im_start|>user\n" + userPrompt + "\n<|im_end|>\n"
        "<|im_start|>assistant\n";

    const std::string sp = toStd(chat);

    // 2) tokenize (–¥–ª—è Qwen add_bos = false)
    int32_t need = llama_tokenize(vocab_, sp.c_str(), (int32_t)sp.size(),
                                  nullptr, 0, /*add_bos*/false, /*special*/true);
    if (need <= 0) return {};

    std::vector<llama_token> tok(need);
    llama_tokenize(vocab_, sp.c_str(), (int32_t)sp.size(),
                   tok.data(), (int32_t)tok.size(), /*add_bos*/false, /*special*/true);

    llama_batch b = llama_batch_init((int32_t)tok.size(), 0, 1);
    for (int i = 0; i < (int)tok.size(); ++i) {
        b.token[i]     = tok[i];
        b.pos[i]       = i;
        b.n_seq_id[i]  = 1;
        b.seq_id[i][0] = 0;
        b.logits[i]    = (i == (int)tok.size() - 1);
    }
    b.n_tokens = (int32_t)tok.size();

    if (llama_decode(ctx_, b) != 0) { llama_batch_free(b); return {}; }
    llama_batch_free(b);
    int n_past = (int)tok.size();

    QString out;
    const llama_token eos = llama_vocab_eos(vocab_);
    const int min_tokens  = 8;             // –Ω–µ –¥–∞—ë–º –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ
    for (int t = 0; t < opt_.max_tokens; ++t) {
        const float* logits = llama_get_logits_ith(ctx_, -1);
        const int n_vocab = llama_vocab_n_tokens(vocab_);

        // –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –ù–ï-EOS, –ø–æ–∫–∞ –Ω–µ –Ω–∞–±—Ä–∞–ª–∏ min_tokens
        int best = -1; float bestv = -1e30f;
        for (int i = 0; i < n_vocab; ++i) {
            if (t < min_tokens && i == eos) continue;
            if (logits[i] > bestv) { bestv = logits[i]; best = i; }
        }
        if (best == -1 || best == eos) break;

        const char* piece = llama_vocab_get_text(vocab_, best);
        if (!piece) break;
        out += QString::fromUtf8(piece);
        if (out.contains('}')) break;

        llama_batch one = llama_batch_init(1, 0, 1);
        one.token[0]     = best;
        one.pos[0]       = n_past;
        one.n_seq_id[0]  = 1;
        one.seq_id[0][0] = 0;
        one.logits[0]    = true;
        one.n_tokens     = 1;

        n_past += 1;
        if (llama_decode(ctx_, one) != 0) { llama_batch_free(one); break; }
        llama_batch_free(one);
    }

    // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    if (out.trimmed().isEmpty()) {
        qWarning() << "[LLM] empty generation after decode";
    }
    return out;
}

QVector<ScoredLabel> LlmTopics::scoreLabels(const QString& text,
                                            const QStringList& labels,
                                            const QString& /*lang*/) {
    QVector<ScoredLabel> out;
    if (!ctx_ || labels.isEmpty()) return out;

    // 1) —Å—Ç—Ä–æ–∏–º JSON-–º–∞—Å—Å–∏–≤ –º–µ—Ç–æ–∫ —Ä–æ–≤–Ω–æ –∫–∞–∫ –≤ –ë–î
    const QString list = "[\"" + labels.join("\",\"") + "\"]";

    // 2) —Å—Ç—Ä–æ–≥–∏–π –ø—Ä–æ–º–ø—Ç –Ω–∞ JSON
    QString prompt =
        "–¢—ã ‚Äî –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–º. –î–∞–Ω–æ: —Å–ø–∏—Å–æ–∫ —Ç–µ–º (JSON-–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫) –∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏.\n"
        "–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –æ–¥–∏–Ω JSON-–æ–±—ä–µ–∫—Ç –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤, —Å—Ç—Ä–æ–≥–æ –≤–∏–¥–∞:\n"
        "{\"<label>\": <score>, ...}\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –∫–ª—é—á–∏ –î–û–õ–ñ–ù–´ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∏–∂–µ; –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —á–∏—Å–ª–∞ 0..1; "
        "—Å—É–º–º–∞ ‚âà 1; –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π –∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ.\n"
        "labels = " + list + "\n"
        "text:\n" + text.left(2000);

    const QString raw = generate(prompt);
    // –õ–û–ì (—Å–º. —Ä–∞–∑–¥–µ–ª ¬´–õ–æ–≥–∏¬ª –Ω–∏–∂–µ)
    qDebug() << "[LLM raw]" << raw.left(300);

    // 3) –ø–∞—Ä—Å–∏–º JSON-–æ–±—ä–µ–∫—Ç
    QMap<QString,double> m;
    for (const auto &l : labels) m[l] = 0.0;

    QJsonParseError perr{};
    const auto doc = QJsonDocument::fromJson(raw.toUtf8(), &perr);

    bool ok = false;
    if (perr.error == QJsonParseError::NoError && doc.isObject()) {
        const auto obj = doc.object();
        // –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏ –∏–∑ labels
        double sum = 0.0;
        for (const auto &l : labels) {
            if (obj.contains(l) && obj[l].isDouble()) {
                double v = std::clamp(obj[l].toDouble(), 0.0, 1.0);
                m[l] = v; sum += v;
            }
        }
        if (sum > 0) {
            for (auto it = m.begin(); it != m.end(); ++it) it.value() /= sum;
            ok = true;
        }
    }

    // 4) —Ñ–æ–ª–±—ç–∫: –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ/–ª–µ–π–±–ª ‚Äî —Å—á–∏—Ç–∞–µ–º –µ–≥–æ 1.0
    if (!ok) {
        const QString trimmed = raw.trimmed().remove('"');
        QString picked;
        // —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for (const auto &l : labels) {
            if (QString::compare(l, trimmed, Qt::CaseInsensitive) == 0) { picked = l; break; }
        }
        // —á–∞—Å—Ç–∏—á–Ω–æ–µ (–Ω–∞ —Å–ª—É—á–∞–π ¬´Tech.¬ª/¬´–ü–æ–ª–∏—Ç–∏–∫–∞.¬ª)
        if (picked.isEmpty()) {
            for (const auto &l : labels) {
                if (trimmed.contains(l, Qt::CaseInsensitive)) { picked = l; break; }
            }
        }
        if (!picked.isEmpty()) {
            for (auto it = m.begin(); it != m.end(); ++it) it.value() = 0.0;
            m[picked] = 1.0;
            ok = true;
        }
    }

    // 5) –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –æ–∫ ‚Äî –º—è–≥–∫–∏–π —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π (–Ω–æ —ç—Ç–æ —Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π)
    if (!ok) {
        const double x = 1.0 / double(m.size());
        for (auto it = m.begin(); it != m.end(); ++it) it.value() = x;
    }

    // 6) –≤–µ–∫—Ç–æ—Ä + —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    out.reserve(m.size());
    for (auto it = m.begin(); it != m.end(); ++it) out.push_back({ it.key(), it.value() });
    std::sort(out.begin(), out.end(), [](auto &a, auto &b){ return a.score > b.score; });

    // –õ–û–ì –∏—Ç–æ–≥–æ–≤
    const int top = std::min(5, int(out.size()));   // üëà –ø—Ä–∏–≤–µ–ª–∏ size –∫ int
    QStringList dbg;
    dbg.reserve(top);
    for (int i = 0; i < top; ++i) {
        dbg << (out[i].label + ":" + QString::number(out[i].score,'f',3));
    }

    return out;
}
