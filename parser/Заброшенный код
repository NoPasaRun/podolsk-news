
// QVector<int> DBManager::upsertArticlesBatch(const QList<QVariantMap>& rows) {
//     dbCheck();
//     QVector<int> ids;
//     if (rows.isEmpty()) return ids;

//     QString sql = QStringLiteral(
//         "INSERT INTO public.article (url, title, summary, published_at, language)\nVALUES\n"
//     );

//     // Строим VALUES (:url0,:title0,...) , (:url1,:title1,...) ...
//     QStringList values;
//     values.reserve(rows.size());
//     for (int i = 0; i < rows.size(); ++i) {
//         values << QString("(:url%1,:title%1,:summary%1,:pub%1,:lang%1)").arg(i);
//     }
//     sql += values.join(",\n");
//     sql += QStringLiteral(
//         "\nON CONFLICT (url) DO UPDATE SET\n"
//         "  title        = COALESCE(EXCLUDED.title, article.title),\n"
//         "  summary      = COALESCE(EXCLUDED.summary, article.summary),\n"
//         "  published_at = GREATEST(article.published_at, EXCLUDED.published_at),\n"
//         "  language     = COALESCE(EXCLUDED.language, article.language)\n"
//         "RETURNING id, url"
//     );

//     if (!db.transaction()) {
//         qWarning() << "[upsertArticlesBatchValues] tx begin failed:" << db.lastError().text();
//     }

//     QSqlQuery q(db);
//     q.prepare(sql);

//     // Биндим значения
//     for (int i = 0; i < rows.size(); ++i) {
//         const auto& r = rows[i];

//         const QString url   = r.value("url").toString();
//         const QString title = r.value("title").toString();
//         const QString sum   = r.value("summary").toString();
//         QString lang        = r.value("language").toString();

//         QDateTime pub = r.value("published_at").toDateTime();
//         if (!pub.isValid()) pub = QDateTime::currentDateTimeUtc();
//         else                pub = pub.toUTC();

//         q.bindValue(QString(":url%1").arg(i), url);
//         q.bindValue(QString(":title%1").arg(i), title);
//         q.bindValue(QString(":summary%1").arg(i), sum);
//         q.bindValue(QString(":pub%1").arg(i), pub);   // Qt сам отдаст timestamptz как нужный тип
//        q.bindValue(QString(":lang%1").arg(i),
//             lang.isEmpty() ? QVariant(QMetaType::fromType<QString>()) : QVariant(lang));
//     }

//     if (!q.exec()) {
//         qWarning() << "[upsertArticlesBatchValues] exec failed:" << q.lastError().text();
//         db.rollback();
//         return {};
//     }

//     while (q.next()) {
//         ids.push_back(q.value(0).toInt()); // id
//         // q.value(1) — url, если нужно сопоставить
//     }

//     if (!db.commit()) {
//         qWarning() << "[upsertArticlesBatchValues] commit failed:" << db.lastError().text();
//     }

//     return ids;
// }
